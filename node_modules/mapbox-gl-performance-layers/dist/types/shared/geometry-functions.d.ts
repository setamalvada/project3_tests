/// <reference types="mapbox-gl" />
import { FeatureCollection } from 'geojson';
import { Feature } from 'geojson';
import { Geometry } from 'geojson';
import { LineString } from 'geojson';
import { MultiLineString } from 'geojson';
import { Point } from 'geojson';
import { MultiPoint } from 'geojson';
import { Polygon } from 'geojson';
import { MultiPolygon } from 'geojson';
export declare function transformX(lng: number): number;
export declare function transformY(lat: number): number;
export declare function pointToPointDistanceSqr(x1: number, y1: number, x2: number, y2: number): number;
export declare function pointToMultiPointDistanceSqr(x: number, y: number, point: Point | MultiPoint): number;
export declare function closestPointOnLine(output: {
    x: number;
    y: number;
}, x: number, y: number, line: LineString | MultiLineString): void;
export declare function isPointInPolygon(x: number, y: number, polygon: Polygon | MultiPolygon): boolean;
export declare function cosOfPointsAngle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): number;
export declare function cosOfAngleBetweenVectors(x1: number, y1: number, x2: number, y2: number): number;
export interface Bounds {
    minX: number;
    minY: number;
    maxX: number;
    maxY: number;
}
export declare function findViewBounds(output: Bounds, map: mapboxgl.Map): void;
export declare function findFeatureCollectionBounds(output: Bounds, featureCollection: FeatureCollection<Geometry, any>): void;
export declare function findFeaturesBounds(output: Bounds, features: ReadonlyArray<Feature<Geometry, any>>): void;
export declare function findFeatureBounds(output: Bounds, feature: Feature<Geometry, any>): void;
export interface PackedFeature<G extends Geometry, P> extends Bounds {
    feature: Feature<G, P>;
    index: number;
}
export declare function packFeature<G extends Geometry, P>(feature: Feature<G, P>, index: number): PackedFeature<G, P>;
