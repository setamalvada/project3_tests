export interface BaseDataOperations<E> {
    add(element: E): void;
    removeFirst(): E | null;
    removeLast(): E | null;
    clear(): void;
    getArray(): ReadonlyArray<E>;
}
export interface DataOperations<E> extends BaseDataOperations<E> {
    addAll(elements: E[]): void;
    removeNFirst(n: number): E[];
    removeNLast(n: number): E[];
}
export declare class BaseDataOperationsComposer<E> implements BaseDataOperations<E> {
    protected sources: BaseDataOperations<E>[];
    protected onDataChange?: (() => void) | undefined;
    constructor(sources: BaseDataOperations<E>[], onDataChange?: (() => void) | undefined);
    add(element: E): void;
    removeFirst(): E | null;
    removeLast(): E | null;
    clear(): void;
    getArray(): ReadonlyArray<E>;
}
export declare class DataOperationsComposer<E> extends BaseDataOperationsComposer<E> implements DataOperations<E> {
    protected sources: DataOperations<E>[];
    constructor(sources: DataOperations<E>[], onDataChange?: () => void);
    addAll(elements: E[]): void;
    removeNFirst(n: number): E[];
    removeNLast(n: number): E[];
}
export declare class DataOperationsExtender<E> implements DataOperations<E> {
    protected source: BaseDataOperations<E>;
    constructor(source: BaseDataOperations<E>);
    add(element: E): void;
    removeFirst(): E | null;
    removeLast(): E | null;
    clear(): void;
    getArray(): ReadonlyArray<E>;
    addAll(elements: E[]): void;
    removeNFirst(n: number): E[];
    removeNLast(n: number): E[];
}
