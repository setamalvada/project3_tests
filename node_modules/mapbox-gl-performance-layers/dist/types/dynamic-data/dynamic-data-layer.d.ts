import { Geometry } from 'geojson';
import { DynamicRenderer } from './renderer/dynamic-renderer';
import { CustomLayerInterface } from 'mapbox-gl';
import { StyleOption } from '../shared/styles';
import { Visibility } from '../shared/visibility';
import { DataOperationsComposer } from './data-operations';
import { DynamicClickProvider } from './click-provider/dynamic-click-provider';
export interface DynamicDataLayerOptions<G extends Geometry, P, S extends {}> {
    id: string;
    renderer: DynamicRenderer<G, P, S>;
    clickProvider?: DynamicClickProvider<G, P>;
    renderingMode?: '2d' | '3d';
}
export declare class DynamicDataLayer<G extends Geometry, P, S extends {}> implements CustomLayerInterface {
    private options;
    private map;
    private visibility;
    constructor(options: DynamicDataLayerOptions<G, P, S>);
    readonly dataOperations: DataOperationsComposer<import("geojson").Feature<G, P>>;
    get id(): string;
    get renderingMode(): '2d' | '3d';
    get type(): 'custom';
    setStyle(styleOption: StyleOption<G, P, S>): void;
    setVisibility(visibility: Visibility): void;
    isVisible(): boolean;
    onAdd(map: mapboxgl.Map, gl: WebGLRenderingContext): void;
    onRemove(map: mapboxgl.Map, gl: WebGLRenderingContext): void;
    prerender(gl: WebGLRenderingContext, matrix: number[]): void;
    render(gl: WebGLRenderingContext, matrix: number[]): void;
}
