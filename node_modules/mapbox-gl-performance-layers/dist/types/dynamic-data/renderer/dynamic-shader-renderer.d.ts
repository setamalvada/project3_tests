/// <reference types="mapbox-gl" />
import { Feature } from 'geojson';
import { Geometry } from 'geojson';
import { DynamicRenderer } from './dynamic-renderer';
import { Shader } from '../../shared/shader/shader';
import { DynamicVertexDataMapper } from '../vertex-data-mapper/dynamic-vertex-data-mapper';
import { DataOperations } from '../data-operations';
import { StyleOption } from '../../shared/styles';
import * as glMatrix from 'gl-matrix';
export declare class DynamicShaderRenderer<G extends Geometry, P, S extends {}> implements DynamicRenderer<G, P, S> {
    private shader;
    private program;
    private arrayBuffer;
    private readonly collection;
    readonly dataOperations: DataOperations<Feature<G, P>>;
    constructor(shader: Shader, vertexDataMapper: DynamicVertexDataMapper<G, P, S>, startingBufferSize?: number);
    setStyle(styleOption: StyleOption<G, P, S>): void;
    initialise(map: mapboxgl.Map, gl: WebGLRenderingContext): void;
    dispose(map: mapboxgl.Map, gl: WebGLRenderingContext): void;
    prerender(): void;
    render(gl: WebGLRenderingContext, matrix: glMatrix.mat4 | number[]): void;
}
