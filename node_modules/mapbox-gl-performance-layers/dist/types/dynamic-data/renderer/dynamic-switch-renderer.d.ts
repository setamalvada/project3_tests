/// <reference types="mapbox-gl" />
import { Feature } from 'geojson';
import { Geometry } from 'geojson';
import { DynamicRenderer } from './dynamic-renderer';
import { StyleOption } from '../../shared/styles';
import { DataOperations } from '../data-operations';
import * as glMatrix from 'gl-matrix';
export interface DynamicSwitchOption<G extends Geometry, P, S extends {}> {
    renderer: DynamicRenderer<G, P, S>;
    condition: (dataOperations: DataOperations<Feature<G, P>>) => boolean;
}
export declare class DynamicSwitchRenderer<G extends Geometry, P, S extends {}> implements DynamicRenderer<G, P, S> {
    private options;
    private broadcastData;
    private map;
    private gl;
    private currentOption;
    constructor(options: DynamicSwitchOption<G, P, S>[], broadcastData?: boolean);
    dataOperations: DataOperations<Feature<G, P>>;
    setStyle(styleOption: StyleOption<G, P, S>): void;
    initialise(map: mapboxgl.Map, gl: WebGLRenderingContext): void;
    dispose(map: mapboxgl.Map, gl: WebGLRenderingContext): void;
    prerender(gl: WebGLRenderingContext, matrix: glMatrix.mat4 | number[]): void;
    render(gl: WebGLRenderingContext, matrix: glMatrix.mat4 | number[]): void;
    private handleDataChange;
}
